(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{408:function(s,t,a){"use strict";a.r(t);var e=a(42),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"mysql-调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-调优"}},[s._v("#")]),s._v(" mysql 调优")]),s._v(" "),a("p",[s._v("导入mysql官方案例数据库 https://dev.mysql.com/doc/index-other.html")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("mysql -u root -p\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("source /sakila-db/sakila-schema.sql\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("source /sakila-db/sakila-data.sql\n")])])]),a("h2",{attrs:{id:"常用指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[s._v("#")]),s._v(" 常用指令")]),s._v(" "),a("h3",{attrs:{id:"slow-query-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slow-query-log"}},[s._v("#")]),s._v(" slow query log")]),s._v(" "),a("blockquote",[a("p",[s._v("慢查询日志")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看是否开启慢查询日志")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%slow_query_log%'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启和关闭 (1和0)，数据库关闭失效")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" slow_query_log"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看多少时间算慢查询，默认10秒")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%long_query_time%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 设置慢查询的阈值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" long_query_time"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"show-profile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-profile"}},[s._v("#")]),s._v(" show profile")]),s._v(" "),a("blockquote",[a("p",[s._v("是mysql提供可以用来分析当前会话中的语句执行的资源消耗情况，可以用于sql调优的测量")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看profile是否开启，默认关闭")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'profiling'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 打开profile")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" profiling "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询profiles")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" profiles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询详情")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" profile cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" block io "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" query "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Query_ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"执行计划-explain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行计划-explain"}},[s._v("#")]),s._v(" 执行计划 explain")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--- Explain查询结果字段说明 ---")]),s._v("\nid: id越大，优先级越高；id相同，执行顺序由上至下\nselect_type: 查询类型，主要用于区别普通查询、联合查询、子查询等\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(": 查询的表\npartitions: 分区\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(": 访问类型\npossible_keys: 查询涉及到的字段若存在索引，将被列出，但不一定被实际使用\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(": 实际使用的索引，如为"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("，则没使用索引。查询中若使用了覆盖索引，则该索引仅出现在"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("列表中\nkey_len: 索引的长度\nref: 显示索引的哪一列被使用了\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(": 根据表统计信息索引选用的情况，大致估算出找出所需的记录需要读取的行数\nextra: 额外信息\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--- type (至少要达到range) ---")]),s._v("\nsystem: 表中只有一行记录，可忽略不计\nconst: 一次就检索到，主键或唯一索引比较常量\neq_ref: 唯一性索引扫描，表中只有一条记录与之匹配，常见于主键或唯一索引扫描\nref: 非唯一性索引扫描，返回匹配某个单独值的所有行\nrange: 只检索给定范围的行，"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("子句中出现"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("between")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v("等查询\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(": 全索引扫描\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("all")]),s._v(": 全表扫描\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--- extra ---")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" filesort: 无法利用索引进行排序，只能利用排序算法，会消耗额外的位置\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("temporary")]),s._v(": 建立临时表来保存中间结果，查询完成后把临时表删除\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Index")]),s._v(": 当前查询有覆盖索引的，直接从索引中取数据，不访问数据表\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(": 使用了"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("查询\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" buffer: 使用了连接缓存\nimpossible "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v("子句的结果是"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("tables")]),s._v(" optimized away: 在没有"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v("子句的情况下，基于索引优化MIN"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("MAX操作\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(": 优化"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v("操作，在找到第一匹配元组后即停止找同样值的动作\n")])])]),a("h2",{attrs:{id:"数据类型优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化"}},[s._v("#")]),s._v(" 数据类型优化")]),s._v(" "),a("h3",{attrs:{id:"数据类型设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型设计原则"}},[s._v("#")]),s._v(" 数据类型设计原则")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("使用可以正确存储数据的最小数据类型")]),s._v(" "),a("p",[s._v("更小数据类型更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期更少")])]),s._v(" "),a("li",[a("p",[s._v("简单数据类型的操作通常需要更少的CPU周期")]),s._v(" "),a("ol",[a("li",[s._v("整型比字符操作代价更低，因为字符集和校对规则是字符比较比整型比较更复杂")]),s._v(" "),a("li",[s._v("使用mysql自建类型而不是字符串来存储日期和时间")]),s._v(" "),a("li",[s._v("用整型存储IP地址")])])]),s._v(" "),a("li",[a("p",[s._v("查询条件中避免包含可为NULL的列")]),s._v(" "),a("p",[s._v("mysql难以优化查询中包含可为 NULL 的列，因为可为 NULL 的列使得索引、索引统计和值比较变得更加复杂")])])]),s._v(" "),a("h3",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("整型：尽量使用满足需求的最小数据类型")]),s._v(" "),a("p",[s._v("TINYINT 8位，SMALLINT 16位，MEDIUMINT 24位，INT 32位，BIGINT 64位")])]),s._v(" "),a("li",[a("p",[s._v("字符和字符串类型")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("varchar：根据实际内容长度保存数据")]),s._v(" "),a("p",[s._v("varchar(n) n小于等于255使用额外一个字节保存长度，n>255使用额外两个字节保存长度")]),s._v(" "),a("p",[s._v("varchar(5)与varchar(255)保存同样的内容，硬盘存储空间相同，但内存空间占用不同，是指定的大小")])]),s._v(" "),a("li",[a("p",[s._v("char固定长度的字符串")]),s._v(" "),a("p",[s._v("最大长度为255，会自动删除末尾的空格。检索和写效率都比varchar高，以空间换时间​")])])])]),s._v(" "),a("li",[a("p",[s._v("BLOB 和 TEXT 类型")]),s._v(" "),a("p",[s._v("MySQL 把每个 BLOB 和 TEXT 值当作一个独立的对象处理")]),s._v(" "),a("p",[s._v("两者都是为了存储很大数据而设计的字符串类型，分别采用二进制和字符方式存储")])]),s._v(" "),a("li",[a("p",[s._v("日期类型：不要使用字符串存储日期类型，占用空间大，损失日期类型函数的便捷性")]),s._v(" "),a("ol",[a("li",[s._v("datetime：8字节，与时区无关，数据库底层时区配置对datetime无效，可保存到毫秒，可保存时间范围大")]),s._v(" "),a("li",[s._v("timestamp：4字节，范围：1970-01-01到2038-01-19，采用整形存储，依赖数据库设置的时区自动更新timestamp列的值")]),s._v(" "),a("li",[s._v("date：3字节，范围 1000-01-01~9999-12-31，可以利用日期时间函数进行日期之间的计算")])])])]),s._v(" "),a("h3",{attrs:{id:"枚举代替字符串类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举代替字符串类型"}},[s._v("#")]),s._v(" 枚举代替字符串类型")]),s._v(" "),a("p",[s._v("有时可以使用枚举类代替常用的字符串类型，mysql存储枚举类型会非常紧凑，会根据列表值的数据压缩到一个或两个字节中，mysql在内部会将每个值在列表中的位置保存为整数，并且在表的.frm文件中保存“数字-字符串”映射关系的查找表")]),s._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("create table enum_test(e enum('fish','apple','dog') not null);\ninsert into enum_test(e) values('fish'),('dog'),('apple');\nselect e+0 from enum_test;\n")])])]),a("h3",{attrs:{id:"特殊类型数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊类型数据"}},[s._v("#")]),s._v(" 特殊类型数据")]),s._v(" "),a("p",[s._v("人们经常使用varchar(15)来存储ip地址，然而，它的本质是32位无符号整数不是字符串，可以使用INET_ATON()和INET_NTOA函数在这两种表示方法之间转换")]),s._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select inet_aton('1.1.1.1')\nselect inet_ntoa(16843009)\n")])])]),a("h2",{attrs:{id:"查询优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询优化"}},[s._v("#")]),s._v(" 查询优化")]),s._v(" "),a("h3",{attrs:{id:"优化细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化细节"}},[s._v("#")]),s._v(" 优化细节")]),s._v(" "),a("ol",[a("li",[s._v("当使用索引列进行查询的时候尽量不要使用表达式")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("尽量使用主键查询，因为主键查询不会触发回表查询")])]),s._v(" "),a("li",[a("p",[s._v("使用前缀索引：取一个字符串的前几个字节作为索引，节约存储空间")]),s._v(" "),a("p",[s._v("对于 BLOB, TEXT, VARCHAR 类型的列必须要使用前缀索引，因为 mysql 不允许索引这些列的完整长度")]),s._v(" "),a("p",[s._v("mysql 无法使用前缀索引做 order by 和 group by")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 索引的选择性越高则查询效率越高")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 索引的选择性 = 不重复的索引值 / 数据表记录总数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sel3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sel4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sel5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sel6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sel7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("distinct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" sel8 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" citydemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 根据前面测试创建前缀索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" citydemo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("索引排序：explain 出来的 type 列的值为 index ，说明 mysql 使用了索引扫描做排序")]),s._v(" "),a("p",[s._v("在使用排序的时候，如果 where 和 order by 中的列能组成一个最左前缀匹配，就会使用索引排序")])]),s._v(" "),a("li",[a("p",[s._v("union all,in,or都能够使用索引，但是推荐使用in")])]),s._v(" "),a("li",[a("p",[s._v("范围列可以用到索引，但是范围列后面的列无法用到索引，索引最多用于一个范围列")])]),s._v(" "),a("li",[a("p",[s._v("强制类型转换会全表扫描")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 不会触发索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" phone"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13800001234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 触发索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" phone"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'13800001234'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[s._v("当需要进行表连接的时候，最好不要超过三张表，因为需要 join 的字段，数据类型必须一致")])]),s._v(" "),a("li",[a("p",[s._v("能使用limit的时候尽量使用limit")])]),s._v(" "),a("li",[a("p",[s._v("单表索引建议控制在5个以内，单索引字段数不允许超过5个（组合索引）")])])]),s._v(" "),a("h3",{attrs:{id:"查询性能低下原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询性能低下原因"}},[s._v("#")]),s._v(" 查询性能低下原因")]),s._v(" "),a("blockquote",[a("p",[s._v("网络、CPU、IO、上下文切换、系统调用、生成统计信息、锁等待时间")])]),s._v(" "),a("p",[s._v("查询性能低下的主要原因：某些查询需要筛选大量的数据，可以通过减少访问数据量进行优化")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("查询不需要的记录：查询时要在后面添加 "),a("code",[s._v("limit")])])]),s._v(" "),a("li",[a("p",[s._v("多表关联时返回全部列")])]),s._v(" "),a("li",[a("p",[s._v("总是取出全部列 "),a("code",[s._v("select *")])])]),s._v(" "),a("li",[a("p",[s._v("重复查询相同的数据：需重复执行返回相同数据的查询，可以使用缓存")])])]),s._v(" "),a("h3",{attrs:{id:"执行过程的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行过程的优化"}},[s._v("#")]),s._v(" 执行过程的优化")]),s._v(" "),a("h4",{attrs:{id:"查询优化处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询优化处理"}},[s._v("#")]),s._v(" 查询优化处理")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("语法解析器和预处理")]),s._v(" "),a("p",[s._v("mysql通过关键字将SQL语句进行解析，并生成一颗解析树，mysql解析器将使用mysql语法规则验证和解析查询，例如验证使用使用了错误的关键字或者顺序是否正确等等，预处理器会进一步检查解析树是否合法，例如表名和列名是否存在，是否有歧义，还会验证权限等等")])]),s._v(" "),a("li",[a("p",[s._v("查询优化器")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film_actor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 可以看到上面这条查询语句需要经过多少个数据页才能找到对应的数据（基于成本）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'last_query_cost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("mysql可能会选择错误的执行计划 原因如下")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("统计信息不准确：InnoDB因为其mvcc的架构，并不能维护一个数据表的行数的精确统计信息")])]),s._v(" "),a("li",[a("p",[s._v("执行计划的成本估算不等同于实际执行的成本：有时候某个执行计划虽然需要读取更多的页面，但是他的成本却更小，因为如果这些页面都是顺序读或者这些页面都已经在内存中的话，那么它的访问成本将很小，mysql层面并不知道哪些页面在内存中，哪些在磁盘，所以查询之际执行过程中到底需要多少次IO是无法得知的")])]),s._v(" "),a("li",[a("p",[s._v("mysql的优化是基于成本模型的优化，但是有可能不是最快的优化")])]),s._v(" "),a("li",[a("p",[s._v("mysql不考虑其他并发执行的查询")])]),s._v(" "),a("li",[a("p",[s._v("mysql不会考虑不受其控制的操作成本")])]),s._v(" "),a("li",[a("p",[s._v("执行存储过程或者用户自定义函数的成本")])])]),s._v(" "),a("h4",{attrs:{id:"优化器的优化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化器的优化策略"}},[s._v("#")]),s._v(" 优化器的优化策略")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("静态优化：直接对解析树进行分析，并完成优化")])]),s._v(" "),a("li",[a("p",[s._v("动态优化：动态优化与查询的上下文有关，也可能跟取值、索引对应的行数有关")])])]),s._v(" "),a("p",[s._v("mysql对查询的静态优化只需要一次，但对动态优化在每次执行时都需要重新评估")]),s._v(" "),a("h4",{attrs:{id:"优化器的优化类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化器的优化类型"}},[s._v("#")]),s._v(" 优化器的优化类型")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("重新定义关联表的顺序：数据表的关联并不总是按照在查询中指定的顺序进行。将外连接转化成内连接，内连接的效率要高于外连接，使用等价变换规则，mysql可以使用一些等价变化来简化并规划表达式")])]),s._v(" "),a("li",[a("p",[s._v("min max：使用min max的时候，使用 group by 条件，这样可以使用索引")])]),s._v(" "),a("li",[a("p",[s._v("索引覆盖扫描：当索引中的列包含所有查询中需要使用的列的时候，可以使用覆盖索引")])]),s._v(" "),a("li",[a("p",[s._v("等值传播： 如果两个列的值通过等式关联，那么mysql能够把其中一个列的where条件传递到另一个上")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 这两个SQL执行效率是一样的")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" film_actor \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" film_actor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h4",{attrs:{id:"优化子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化子查询"}},[s._v("#")]),s._v(" 优化子查询")]),s._v(" "),a("p",[s._v("子查询尽可能使用关联查询代替，因为子查询产生的临时表数据集多，产生额外的IO")]),s._v(" "),a("h4",{attrs:{id:"优化排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化排序"}},[s._v("#")]),s._v(" 优化排序")]),s._v(" "),a("p",[s._v("排序的算法：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("两次传输排序：第一次数据读取是将需要排序的字段读取出来，然后进行排序，第二次是将排好序的结果按照需要去读取数据行")]),s._v(" "),a("p",[s._v("缺点：需要进行两次IO，效率较低")])]),s._v(" "),a("li",[a("p",[s._v("单次传输排序：先读取查询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结")]),s._v(" "),a("p",[s._v("缺点：在查询的列特别多的时候，会占用大量的存储空间，无法存储大量的数据")])])]),s._v(" "),a("p",[a("strong",[s._v("优化策略")])]),s._v(" "),a("p",[s._v("当需要排序的列的总大小超过 max_length_for_sort_data 定义的字节，mysql 会选择双次排序，反之使用单次排序，当然，用户可以设置此参数的值来选择排序的方式")]),s._v(" "),a("h4",{attrs:{id:"优化count查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化count查询"}},[s._v("#")]),s._v(" 优化count查询")]),s._v(" "),a("p",[s._v("总有人认为myisam的count函数比较快，这是有前提条件的，只有没有任何where条件的count才是比较快的")]),s._v(" "),a("p",[a("strong",[s._v("使用近似值")])]),s._v(" "),a("p",[s._v("在某些应用场景中，不需要完全精确的值，可以参考使用近似值来代替，比如可以使用explain来获取近似的值")]),s._v(" "),a("p",[s._v("其实在很多OLAP的应用中，需要计算某一个列值的基数，有一个计算近似值的算法叫hyperloglog。")]),s._v(" "),a("p",[a("strong",[s._v("更复杂的优化")])]),s._v(" "),a("p",[s._v("一般情况下，count()需要扫描大量的行才能获取精确的数据，其实很难优化，在实际操作的时候可以考虑使用索引覆盖扫描，或者增加汇总表，或者增加外部缓存系统。")]),s._v(" "),a("h4",{attrs:{id:"优化关联查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化关联查询"}},[s._v("#")]),s._v(" 优化关联查询")]),s._v(" "),a("p",[s._v("join的实现方式原理")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210122101434106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),s._v(" "),a("ol",[a("li",[s._v("Join Buffer会缓存所有参与查询的列而不是只有Join的列。")]),s._v(" "),a("li",[s._v("可以通过调整join_buffer_size缓存大小，默认值是256K")]),s._v(" "),a("li",[s._v("使用Block Nested-Loop Join算法需要开启优化器管理配置的optimizer_switch的设置block_nested_loop为on，默认为开启。")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%optimizer_switch%'")]),s._v("\n")])])]),a("p",[a("strong",[s._v("join on and 解释")])]),s._v(" "),a("p",[s._v("两张表匹配的时候，如果使用 and ，那么最终结果集中未被 and 匹配上的记录会展示为 NULL")]),s._v(" "),a("p",[s._v("举例1：假如是左连接，那么下面第一行返回的结果集的基础上，再将 e.age <= 20的 d 表的记录置为NULL")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" dep d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("举例2：左表记录都存在，右表记录都是NULL")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("left")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" dep d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("优化策略")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("确保 on 或者 using 子句中的列上有索引")])]),s._v(" "),a("li",[a("p",[s._v("一般情况下来说，只需要在关联顺序中的第二个表的相应列上创建索引")])]),s._v(" "),a("li",[a("p",[s._v("确保任何的 group by 和 order by 中的表达式只涉及到一个表中的列，这样mysql才有可能使用索引来优化这个过程")])]),s._v(" "),a("li",[a("p",[s._v("优化子查询：子查询的优化最重要的优化建议是尽可能使用关联查询代替")])]),s._v(" "),a("li",[a("p",[s._v("尽可能减少Join语句中NestedLoop的循环总次数，用小结果集驱动大结果集。")])]),s._v(" "),a("li",[a("p",[s._v("确保Join语句中被驱动表上的Join条件字段已经被索引。")])])]),s._v(" "),a("h4",{attrs:{id:"优化limit分页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化limit分页"}},[s._v("#")]),s._v(" 优化limit分页")]),s._v(" "),a("blockquote",[a("p",[s._v("在很多应用场景中我们需要将数据进行分页，一般会使用limit加上偏移量的方法实现，同时加上合适的order by 的子句，如果这种方式有索引的帮助，效率通常不错，否则的化需要进行大量的文件排序操作，还有一种情况，当偏移量非常大的时候，前面的大部分数据都会被抛弃，这样的代价太高。")])]),s._v(" "),a("p",[s._v("要优化这种查询的话，要么是在页面中限制分页的数量，要么优化大偏移量的性能")]),s._v(" "),a("p",[s._v("优化此类查询的最简单的办法就是尽可能地使用覆盖索引，而不是查询所有的列")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看执行计划查看扫描的行数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 1000行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("description "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" title "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 55+1+55 行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("film"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("description "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" film_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" title "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" lim "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("film_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h4",{attrs:{id:"优化union查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化union查询"}},[s._v("#")]),s._v(" 优化union查询")]),s._v(" "),a("blockquote",[a("p",[s._v("mysql总是通过创建并填充临时表的方式来执行union查询，因此很多优化策略在union查询中都没法很好的使用。经常需要手工的将where、limit、order by等子句下推到各个子查询中，以便优化器可以充分利用这些条件进行优化")])]),s._v(" "),a("p",[s._v("除非确实需要服务器消除重复的行，否则一定要使用union all，因此没有all关键字，mysql会在查询的时候给临时表加上distinct的关键字，这个操作的代价很高")]),s._v(" "),a("h4",{attrs:{id:"推荐使用用户自定义变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐使用用户自定义变量"}},[s._v("#")]),s._v(" 推荐使用用户自定义变量")]),s._v(" "),a("p",[a("strong",[s._v("自定义变量的使用")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@one")]),s._v(" :"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@min_actor")]),s._v(" :"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("actor_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@last_week")]),s._v(" :"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("current_date")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interval")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" week"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("自定义变量的限制")])]),s._v(" "),a("ol",[a("li",[s._v("无法使用查询缓存")]),s._v(" "),a("li",[s._v("不能在使用常量或者标识符的地方使用自定义变量，例如表名、列名或者limit子句")]),s._v(" "),a("li",[s._v("用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接间的通信")]),s._v(" "),a("li",[s._v("不能显式地声明自定义变量地类型")]),s._v(" "),a("li",[s._v("mysql优化器在某些场景下可能会将这些变量优化掉，这可能导致代码不按预想地方式运行")]),s._v(" "),a("li",[s._v("赋值符号：=的优先级非常低，所以在使用赋值表达式的时候应该明确的使用括号")]),s._v(" "),a("li",[s._v("使用未定义变量不会产生任何语法错误")])]),s._v(" "),a("p",[a("strong",[s._v("自定义变量的使用案例")])]),s._v(" "),a("p",[s._v("优化排名语句")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 在给一个变量赋值的同时使用这个变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" rownum "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询获取演过最多电影的前10名演员，然后根据出演电影次数做一个排名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" film_actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" actor_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("desc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 避免重新查询刚刚更新的数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 当需要高效的更新一条记录的时间戳，同时希望查询当前记录中存放的时间戳是什么")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v("  lastUpdated"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" lastUpdated "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" lastupdated "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@now")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 确定取值的顺序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 在赋值和读取变量的时候可能是在查询的不同阶段")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 因为where和select在查询的不同阶段执行，所以看到查询到两条记录，这不符合预期")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("order")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("by")]),s._v(" first_name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 当引入了order by之后，发现打印出了全部结果，这是因为order by引入了文件排序，而where条件是在文件排序操作之前取值的  ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 解决这个问题的关键在于让变量的赋值和取值发生在执行查询的同一阶段：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" actor_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cnt "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" actor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@rownum")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);