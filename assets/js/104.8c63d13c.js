(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{457:function(v,_,i){"use strict";i.r(_);var t=i(42),l=Object(t.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"设计模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),i("p",[v._v("设计模式是一种能够更好的实现程序的拓展性的思想")]),v._v(" "),i("h2",{attrs:{id:"设计原则"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[v._v("#")]),v._v(" 设计原则")]),v._v(" "),i("p",[i("strong",[v._v("单一职责原则")]),v._v(" - Single Responsibility Principle")]),v._v(" "),i("p",[v._v("一个类应该只有一个发生变化的原因")]),v._v(" "),i("p",[i("strong",[v._v("开闭原则")]),v._v(" - Open Closed Principle")]),v._v(" "),i("p",[v._v("一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭")]),v._v(" "),i("p",[i("strong",[v._v("里氏替换原则")]),v._v(" - Liskov Substitution Principle")]),v._v(" "),i("p",[v._v("所有引用基类的地方必须能透明地使用其子类的对象")]),v._v(" "),i("p",[i("strong",[v._v("迪米特法则")]),v._v(" - Law of Demeter")]),v._v(" "),i("p",[v._v("如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。")]),v._v(" "),i("p",[i("strong",[v._v("接口隔离原则")]),v._v(" - Interface Segregation Principle")]),v._v(" "),i("p",[v._v("客户端不应该依赖它不需要的接口。类间的依赖关系应该建立在最小的接口上。")]),v._v(" "),i("p",[i("strong",[v._v("依赖倒置原则")]),v._v(" - Dependence Inversion Principle")]),v._v(" "),i("p",[v._v("上层模块不应该依赖底层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。")]),v._v(" "),i("h2",{attrs:{id:"设计模式分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设计模式分类"}},[v._v("#")]),v._v(" 设计模式分类")]),v._v(" "),i("p",[v._v("创建型模式（5种）")]),v._v(" "),i("ol",[i("li",[v._v("工厂方法模式")]),v._v(" "),i("li",[v._v("抽象工厂模式")]),v._v(" "),i("li",[v._v("建造者模式")]),v._v(" "),i("li",[v._v("原型模式")]),v._v(" "),i("li",[v._v("单例模式")])]),v._v(" "),i("p",[v._v("结构型模式（7种）")]),v._v(" "),i("ol",[i("li",[v._v("适配器模式")]),v._v(" "),i("li",[v._v("桥接模式")]),v._v(" "),i("li",[v._v("组合模式")]),v._v(" "),i("li",[v._v("装饰器模式")]),v._v(" "),i("li",[v._v("外观模式")]),v._v(" "),i("li",[v._v("享元模式")]),v._v(" "),i("li",[v._v("代理模式")])]),v._v(" "),i("p",[v._v("行为型模式（10种）")]),v._v(" "),i("ol",[i("li",[v._v("责任链模式")]),v._v(" "),i("li",[v._v("命令模式")]),v._v(" "),i("li",[v._v("迭代器模式")]),v._v(" "),i("li",[v._v("中介者模式")]),v._v(" "),i("li",[v._v("备忘录模式")]),v._v(" "),i("li",[v._v("观察者模式")]),v._v(" "),i("li",[v._v("状态模式")]),v._v(" "),i("li",[v._v("策略模式")]),v._v(" "),i("li",[v._v("模板方法模式")]),v._v(" "),i("li",[v._v("访问者模式")])])])}),[],!1,null,null,null);_.default=l.exports}}]);