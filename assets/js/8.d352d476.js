(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{366:function(a,s,t){"use strict";t.r(s);var e=t(42),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-jvm"}},[a._v("#")]),a._v(" Java JVM")]),a._v(" "),t("h2",{attrs:{id:"class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[a._v("#")]),a._v(" Class")]),a._v(" "),t("h3",{attrs:{id:"java从编码到执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java从编码到执行"}},[a._v("#")]),a._v(" Java从编码到执行")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210111203500781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h3",{attrs:{id:"混合模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混合模式"}},[a._v("#")]),a._v(" 混合模式")]),a._v(" "),t("p",[a._v("解释器：bytecode intepreter")]),a._v(" "),t("p",[a._v("JIT：Just In-Time compiler")]),a._v(" "),t("p",[a._v("混合使用解释器 + 热点代码编译")]),a._v(" "),t("p",[a._v("起始阶段采用解释执行")]),a._v(" "),t("p",[a._v("热点代码检测")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("多次被调用的方法（方法计数器：监测方法执行频率）")])]),a._v(" "),t("li",[t("p",[a._v("多次被调用的循环（循环计数器：监测循环执行频率）")])]),a._v(" "),t("li",[t("p",[a._v("进行编译")])]),a._v(" "),t("li",[t("p",[a._v("-Xmixed 默认为混合模式 开始解释执行，启动速度较快，对热点代码实行检测和编译")])]),a._v(" "),t("li",[t("p",[a._v("-Xint 使用编译模式，启动很快，执行稍慢")])]),a._v(" "),t("li",[t("p",[a._v("-Xcomp 使用纯编译模式，执行很快，启动很慢")])])]),a._v(" "),t("h3",{attrs:{id:"class类文件解释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class类文件解释"}},[a._v("#")]),a._v(" Class类文件解释")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210111220329956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h3",{attrs:{id:"class生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class生命周期"}},[a._v("#")]),a._v(" Class生命周期")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210111220751109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h3",{attrs:{id:"classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classloader"}},[a._v("#")]),a._v(" ClassLoader")]),a._v(" "),t("p",[t("strong",[a._v("类加载流程图：")]),a._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200131191909464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),a._v(" "),t("strong",[a._v("类加载器示意图：")]),a._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210111220915818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("p",[t("strong",[a._v("ClassLoader")]),a._v("：负责加载class文件（class文件在文件开头有特定文件标识）")]),a._v(" "),t("p",[t("strong",[a._v("各个类加载器的作用")])]),a._v(" "),t("p",[a._v("BootStrapClassLoader 引导类加载器：加载JVM自身需要的类，使用C++实现，负责加载"),t("code",[a._v("%JAVA_HOME%/jre/lib.jar")]),a._v("核心类库。")]),a._v(" "),t("p",[a._v("ExtensionClassLoader 扩展类加载器：负责加载%JAVA_HOME%/lib/ext目录下的类。")]),a._v(" "),t("p",[a._v("AppClassLoader 系统类加载器：负责加载系统类路径"),t("code",[a._v("java -classpath")]),a._v("或"),t("code",[a._v("-D java.class.path")]),a._v(" 指定路径下的类库。")]),a._v(" "),t("p",[a._v("CustomClassLoader 自定义类加载器：继承ClassLoader重写findClass方法")]),a._v(" "),t("p",[t("strong",[a._v("双亲委派")]),a._v("：JVM收到类加载请求，他会自底向上地去缓存中找这个类，找到了返回，没找到就把这个请求委派给父加载器（不是继承）去寻找，直到BootstrapClassLoader也没找到时，会自顶向下加载这个class，如果到最后还没加载成功，则会抛出异常 "),t("code",[a._v("ClassNotFoundException")])]),a._v(" "),t("p",[a._v("作用：沙箱安全，不让自己定义的类去勿扰JDK出厂自带的类")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210111223139570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"jvm-内存模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存模型"}},[a._v("#")]),a._v(" JVM 内存模型")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200131192106991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("程序计数器")]),a._v("：存放指令位置，虚拟机的运行就是循环取PC中的指令")]),a._v(" "),t("li",[t("strong",[a._v("栈")]),a._v("：每个JVM都有自己私有的JVM栈，JVM栈用来存储栈帧")]),a._v(" "),t("li",[t("strong",[a._v("本地方法栈")]),a._v("：存放native方法的地方。")]),a._v(" "),t("li",[t("strong",[a._v("堆")]),a._v("：所有线程共享，存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。")]),a._v(" "),t("li",[t("strong",[a._v("方法区")]),a._v("：存储class二进制文件、类信息、常量、静态变量、运行时常量池")]),a._v(" "),t("li",[t("strong",[a._v("直接内存")]),a._v("：JVM可以直接访问的内核空间的内存。")])]),a._v(" "),t("p",[t("strong",[a._v("图示：线程的共享区和私有区")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210119205519997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h2",{attrs:{id:"stack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[a._v("#")]),a._v(" Stack")]),a._v(" "),t("p",[a._v("栈：每个JVM都有自己私有的JVM栈，JVM栈用来存储Frame")]),a._v(" "),t("p",[a._v("Frame：每个方法对应一个 Frame")]),a._v(" "),t("p",[a._v("Frame 存放：Local Variable Table, Operated Stack, Dynamic Linking, Return Address")]),a._v(" "),t("p",[a._v("Local Variable Table：byte、short、int、long、float、double、boolean、char、reference")]),a._v(" "),t("p",[a._v("Dynamic Linking：A方法调用B方法，这个过程就叫动态链接")]),a._v(" "),t("p",[a._v("Return Address：A方法调用B方法，B方法返回值的存放地址")]),a._v(" "),t("p",[a._v("案例：输出结果为8")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将8压入操作数栈，再将8拿出来赋值给i")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将8压入操作数栈，i加1，从操作数栈中弹出8赋值给i")]),a._v("\ni "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 输出最终结果 8")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[t("strong",[a._v("栈上分配")])]),a._v(" "),t("p",[a._v("逃逸分析：逃逸分析的目的是判断对象的作用域是否有可能逃逸出函数体。")]),a._v(" "),t("p",[a._v("标量替换：允许将对象打散分配在栈上，比如若一个对象拥有两个字段，会将这两个字段视作局部变量进行分配。")]),a._v(" "),t("h2",{attrs:{id:"heap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#heap"}},[a._v("#")]),a._v(" Heap")]),a._v(" "),t("h3",{attrs:{id:"堆的基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆的基本概念"}},[a._v("#")]),a._v(" 堆的基本概念")]),a._v(" "),t("p",[a._v("Java 中的堆是用来存储对象本身的以及数组（当然，数组引用是存放在 Java 栈中的）， 堆是被所有线程共享的，在 JVM 中只有一个堆。所有对象实例以及数组都要在堆上分配内 存，单随着 JIT 发展，栈上分配，标量替换优化技术，在堆上分配变得不那么到绝对，只能在 server 模式下才能启用逃逸分析。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 左边存放在栈中，右边存放在堆中")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" person "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"张三"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"jvm-内存分代模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存分代模型"}},[a._v("#")]),a._v(" JVM 内存分代模型")]),a._v(" "),t("blockquote",[t("p",[a._v("除了 Epsilon ZGC Shenandoah 之外的GC都是使用逻辑分代模型")]),a._v(" "),t("p",[a._v("G1是逻辑分代，物理不分代")]),a._v(" "),t("p",[a._v("除上述 GC 模型之外不仅是逻辑分代，而且是物理分代")])]),a._v(" "),t("p",[a._v("新生代 = Eden区 + 2 个 Suvivor区")]),a._v(" "),t("ol",[t("li",[a._v("YGC 回收之后，大多数对象被回收，活着的进入S0")]),a._v(" "),t("li",[a._v("再次 YGC ，活着的对象 Eden + S0 -> S1")]),a._v(" "),t("li",[a._v("再次 YGC， Eden + S1 -> S0")]),a._v(" "),t("li",[a._v("年龄足够进入老年代")]),a._v(" "),t("li",[a._v("分配担保：Suvivor区装不下直接进入老年代")])]),a._v(" "),t("p",[a._v("老年代：")]),a._v(" "),t("ol",[t("li",[a._v("老年代满了就Full GC")])]),a._v(" "),t("p",[a._v("永久代（1.7）/ 元空间（1.8）")]),a._v(" "),t("ol",[t("li",[a._v("永久代 元空间 - Class")]),a._v(" "),t("li",[a._v("永久代必须指定大小限制，元空间可以设置，也可以不设置，上限取决于物理内存")]),a._v(" "),t("li",[a._v("字符串常量 1.7 - 永久代，1.8 - 堆")]),a._v(" "),t("li",[a._v("永久代和元空间都是方法区的实现")])]),a._v(" "),t("p",[a._v("图示")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200131193503949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h3",{attrs:{id:"实例化对象分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例化对象分配"}},[a._v("#")]),a._v(" 实例化对象分配")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("栈上分配")]),a._v(" "),t("p",[a._v("线程私有小对象、无逃逸、支持标量替换")])]),a._v(" "),t("li",[t("p",[a._v("线程本地分配 TLAB （Thread Local Alllocation Buffer）")]),a._v(" "),t("p",[a._v("默认占用Eden的1%、多线程的时候不用竞争Eden就可以申请空间，提升效率、小对象")])]),a._v(" "),t("li",[t("p",[a._v("老年代：大对象")])])]),a._v(" "),t("h2",{attrs:{id:"gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[a._v("#")]),a._v(" GC")]),a._v(" "),t("h3",{attrs:{id:"gc概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc概述"}},[a._v("#")]),a._v(" GC概述")]),a._v(" "),t("p",[a._v("GC是什么（分代收集算法）")]),a._v(" "),t("ul",[t("li",[a._v("频繁收集Young区")]),a._v(" "),t("li",[a._v("较少收集Old区")]),a._v(" "),t("li",[a._v("基本不动元空间")])]),a._v(" "),t("p",[a._v("普通GC(Minor GC)：只针对新生代区域的GC，指发生在新生代的垃圾收集动作，因为大部分Java对象存活率不高，所以Minor GC非常频繁，一般回收速度也比较快。")]),a._v(" "),t("p",[a._v("全局GC(Major GC / Full GC)：指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴随至少一次的Minor GC，Major GC的速度一般要比Minor GC慢10倍以上。")]),a._v(" "),t("p",[t("strong",[a._v("Card Table")])]),a._v(" "),t("p",[a._v("由于做 YGC 时，需要扫描整个 OLD 区，效率非常低，所以 JVM 设计了 Card Table，如果一个 OLD 区的 Card Table 中有对象指向 Y 区，就将它设为 Dirty，下次扫描时，只需要扫描 Ditry Card。在结构上，Card Table 用 Bit Map 实现。")]),a._v(" "),t("p",[t("strong",[a._v("CSet（Collection Set）")])]),a._v(" "),t("p",[a._v("一组可以被回收的集合，在CSet中存活的数据会在GC的过程中被移动到另一个可用分区，CSet中的分区可以来自Eden、Survivor、Old区，CSet会占用不到整个堆空间1%的大小。简单来说，G1中需要被回收的Card的集合。")]),a._v(" "),t("p",[t("strong",[a._v("RSet（Remembered Set）")])]),a._v(" "),t("p",[a._v("记录了其它 Region 中的对象到本 Region 的引用")]),a._v(" "),t("p",[a._v("使得垃圾回收器不需要扫描整个堆栈来找到谁引用了当前分区中的对象，只需要扫描 RSet 即可")]),a._v(" "),t("p",[a._v("由于RSet的存在，那么每次给对象赋值引用的时候，就得做一些额外的操作：在RSet中做一些额外的记录，在GC中被称为写屏障（这个写屏障 不等于内存屏障）")]),a._v(" "),t("h3",{attrs:{id:"如何定位垃圾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何定位垃圾"}},[a._v("#")]),a._v(" 如何定位垃圾")]),a._v(" "),t("p",[t("strong",[a._v("引用计数法")])]),a._v(" "),t("p",[a._v("没有被引用的内存空间就是垃圾，需要被收集")]),a._v(" "),t("p",[a._v("缺点：计数器本身有消耗，较难处理循环引用")]),a._v(" "),t("p",[t("strong",[a._v("根可达性分析算法")])]),a._v(" "),t("p",[a._v('通过一系列的名为"GC Root"的对象作为起点，从这些节点向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Root没有任何引用链相连时，则该对象不可达，该对象是不可使用的，垃圾收集器将回收其所占的内存。')]),a._v(" "),t("p",[a._v("Java 可以做GC Root的对象：局部变量表、静态变量引用的对象、常量池引用的对象、Native方法引用的对象。")]),a._v(" "),t("h3",{attrs:{id:"常用的垃圾回收算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的垃圾回收算法"}},[a._v("#")]),a._v(" 常用的垃圾回收算法")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("复制算法（Copying）：没有碎片，浪费空间")]),a._v(" "),t("p",[a._v("YGC用的是复制算法，复制算法的基本思想是将内存分为两块，每次只用其中一块，当一块内存用完，就将还活着的对象复制到另一块上面，复制算法不会产生内存碎片。")]),a._v(" "),t("p",[a._v("原理：从根集合（GC Root）开始，通过Tracing从From中找到存活对象，拷贝到To中。From和To交换身份，下次内存分配从To开始")]),a._v(" "),t("p",[a._v("缺点：浪费了一半内存")])]),a._v(" "),t("li",[t("p",[a._v("标记清除（Mark-Sweep）：位置不连续，产生碎片，效率偏低（两遍扫描）")]),a._v(" "),t("p",[a._v("老年代一般由标记清除和标记整理混合实现")]),a._v(" "),t("p",[a._v("原理：算法分成标记和清除两个阶段。在标记阶段，collector从根对象开始进行遍历，对从根对象可以访问到的对象都打上一个标识，将其记录为可达对象。在清除阶段，collector对堆内存从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象，则就将其回收。")]),a._v(" "),t("p",[a._v("解释：程序运行期间，可用内存将被耗尽的时候,GC线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象。")]),a._v(" "),t("p",[a._v("缺点：两次扫描，耗时严重，会产生内存碎片（清理出来的内存是不连续的）")])]),a._v(" "),t("li",[t("p",[a._v("标记清除压缩（Mark-Compact）：没有碎片，效率偏低（两遍扫描，指针需要调整）")]),a._v(" "),t("p",[a._v("第一步：标记清除\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200117210457686.png",alt:"在这里插入图片描述"}}),a._v("\n第二步：压缩，再次扫描，并往一端滑动存活对象\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200117210521309.png",alt:"在这里插入图片描述"}})])])]),a._v(" "),t("h3",{attrs:{id:"垃圾回收器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[a._v("#")]),a._v(" 垃圾回收器")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("串行回收：单线程，会暂停所有的用户线程，Serial + Serial Old")])]),a._v(" "),t("li",[t("p",[a._v("并行回收：多线程，会暂停所有的用户线程，Parallel Scavenge + Parallel Old（JDK8默认）")])]),a._v(" "),t("li",[t("p",[a._v("并发标记清除：用户线程和垃圾收集线程同时执行（并行或交替），ParNew + CMS")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("CMS四个阶段：初始标记，并发标记，重新标记，并发清除")])]),a._v(" "),t("li",[t("p",[a._v("CSM的问题：会产生碎片，有浮动垃圾，当老年代碎片过多，换Serial Old上场")])]),a._v(" "),t("li",[t("p",[a._v("CMS问题解决方案之一：降低触发CMS的阈值，如果频繁发生SerialOld卡顿，应该调小阈值")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("-XX:CMSInitiatingOccupancyFraction "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("70")]),a._v("% "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 内存空间降低到70%再进行回收，默认是68%")]),a._v("\n")])])])])])]),a._v(" "),t("li",[t("p",[a._v("G1：将堆内存分割成不同的区域并发的对其进行垃圾回收，只在逻辑上分年轻代老年代")]),a._v(" "),t("p",[a._v("G1可以在大多数情况下实现指定的GC暂停时间，同时还能保持较高的吞吐量。")]),a._v(" "),t("p",[t("font",{attrs:{color:"blue"}},[a._v("G1可以动态地调整新老年代的比例")]),a._v("，调整的依据是 YGC 的暂停时间。比如指定的暂定时间是20ms，此时10个 region 中有6个Y区，但回收时间是30ms，那么G1会将6个Y区减少至5个或4个Y区直到暂定时间小于20ms为止。")],1),a._v(" "),t("p",[a._v("G1在对象太多的时候也会产生Full GC，如果产生Full GC，我们应该做：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("扩内存")])]),a._v(" "),t("li",[t("p",[a._v("提高 CPU 性能")])]),a._v(" "),t("li",[t("p",[t("font",{attrs:{color:"blue"}},[a._v("降低 MixedGC 触发的阈值，让MixedGC提早发生（默认45%）")])],1),a._v(" "),t("p",[a._v("MixedGC（类似CMS）：初始标记STW，并发标记，最终标记STW，筛选回收STW（并行）")])])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/2021011714275194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h3",{attrs:{id:"垃圾回收器算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器算法"}},[a._v("#")]),a._v(" 垃圾回收器算法")]),a._v(" "),t("p",[t("strong",[a._v("垃圾回收器使用的算法")])]),a._v(" "),t("p",[a._v("CMS：三色标记 + Incremental Update")]),a._v(" "),t("p",[a._v("G1：三色标记 + SATB（Snapshot at the begining）")]),a._v(" "),t("p",[a._v("ZGC：Colored Pointers（颜色指针）")]),a._v(" "),t("p",[t("strong",[a._v("三色标记算法")])]),a._v(" "),t("p",[a._v("三色标记把对象在逻辑上分成三种颜色")]),a._v(" "),t("p",[a._v("白：未被标记的对象")]),a._v(" "),t("p",[a._v("灰：自身被标记，成员变量未被标记")]),a._v(" "),t("p",[a._v("黑：自身和成员变量均已标记完成")]),a._v(" "),t("p",[a._v("漏标：本来是 live object，但是由于没有遍历到，被当成 garbage 回收掉了。在并发标记的过程中，黑色指向了白色，如果不对黑色重新扫描，则会把白色对象当做没有新引用指向从而回收掉。")]),a._v(" "),t("p",[a._v("如果解决漏标：Incremental Update、SATB")]),a._v(" "),t("p",[a._v("Incremental Update（增量更新）：当一个白色对象被一个黑色对象引用，将黑色重启标记为灰色，让 Controller 重新扫描")]),a._v(" "),t("p",[a._v("SATB（Snapshot at the begining）：在起始的时候做一个快照，当灰色->白色引用消失时，要把这个"),t("font",{attrs:{color:"blue"}},[a._v("引用")]),a._v("推到GC的堆栈，下次扫描时拿到这个引用，由于有RSet的存在，不需要扫描整个堆区查找指向白色的引用，效率比较高。")],1),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210214141554379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),a._v(" "),t("h3",{attrs:{id:"引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[a._v("#")]),a._v(" 引用")]),a._v(" "),t("ul",[t("li",[a._v("强引用：OOM也不回收")]),a._v(" "),t("li",[a._v("软引用：内存不足时回收")]),a._v(" "),t("li",[a._v("弱引用：只要执行GC就被回收")]),a._v(" "),t("li",[a._v("虚引用：跟没引用一样，可以用来管理堆外内存（直接内存），当对象被回收时，通过Queue可以检测到，然后清理堆外内存。堆外内存如何回收 -- Unsafe.freeMemory(address)")])]),a._v(" "),t("h3",{attrs:{id:"gc-常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc-常用参数"}},[a._v("#")]),a._v(" GC 常用参数")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 年轻代 最小堆 最大堆 栈空间")]),a._v("\n-Xmn -Xms -Xmx -Xss\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用TLAB，默认打开")]),a._v("\n-XX:+UseTLAB\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印TLAB的使用情况")]),a._v("\n-XX:+PrintTLAB\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置TLAB大小")]),a._v("\n-XX:TLABSize\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 禁用 System.gc()，System.gc()是Full GC")]),a._v("\n-XX:+DisableExplictGC\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印GC")]),a._v("\n-XX:+PrintGC\n-XX:+PrintGCDetails\n-XX:+PrintGCTimeStamps\n-XX:+PrintHeapAtGC\n-XX:+PrintGCTimeStamps\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印应用程序时间")]),a._v("\n-XX:+PrintGCApplicationConcurrentTime\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印暂停时长")]),a._v("\n-XX:+PrintGCApplicationStoppedTime\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 记录回收了多少种不同引用类型的引用")]),a._v("\n-XX:+PrintReferenceGC\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 可在程序运行时，打印虚拟机接受到的命令行显示参数")]),a._v("\n-XX:+PrintVMOptions\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# GC的升代年龄")]),a._v("\n-XX:MaxTenuringThreshold\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 锁自旋次数")]),a._v("\n-XX:PreBlockSpin\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 热点代码检测参数，执行多少次会变成热点代码进行本地化的编译")]),a._v("\n-XX:ComplieThreshold\n")])])]),t("h3",{attrs:{id:"parallel-常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-常用参数"}},[a._v("#")]),a._v(" Parallel 常用参数")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Survivor的比例")]),a._v("\n-XX:SurvivorRatio\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 多大的大对象会被直接分配到Old区")]),a._v("\n-XX:PreTenureSizeThreshold\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同")]),a._v("\n-XX:+ParallelGCThreads\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 自动选择各区大小比例")]),a._v("\n-XX:+UseAdaptiveSizePolicy\n")])])]),t("h3",{attrs:{id:"cms-常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms-常用参数"}},[a._v("#")]),a._v(" CMS 常用参数")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用CMS")]),a._v("\n-XX:+UseConcMarkSweepGC\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# CMS线程数量")]),a._v("\n-XX:ParallelCMSThreads\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用多少比例的老年代后开始CMS收集，默认是68%")]),a._v("\n-XX:CMSInitiatingOccupancyFraction\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在FGC时进行压缩(标记整理)")]),a._v("\n-XX:+UseCMSCompactAtFullCollection\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 多少次FGC后进行压缩")]),a._v("\n-XX:CMSFullGCsBeforeCompaction\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 停顿时间")]),a._v("\n-XX:MaxGCPauseMillis\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 回收永久代")]),a._v("\n-XX:+CMSClassUnloadingEnabled\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 达到什么比例时进行Perm回收")]),a._v("\n-XX:CMSInitiatingPermOccupancyFraction\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置GC时间占用程序运行时间的百分比")]),a._v("\nGCTimeRatio\n")])])]),t("h3",{attrs:{id:"g1-常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1-常用参数"}},[a._v("#")]),a._v(" G1 常用参数")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用G1")]),a._v("\n-XX:+UseG1GC\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 建议最大停顿时间，GC会尝试调整Young区的块数来达到这个值")]),a._v("\n-XX:MaxGCPauseMillis\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 分区大小，建议逐渐增大该值，1 2 4 8 16 32")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 随着size增加，垃圾存活的时间更长，GC间隔更长，但每次GC的时间也会更长")]),a._v("\n-XX:+G1HeapRegionSize\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 新生代最小比例，默认5%")]),a._v("\nG1NewSizePercent\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 新生代最大比例，默认60%")]),a._v("\nG1MaxNewSizePercent\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# GC时间建议比例，G1会根据这个值调整空间")]),a._v("\nGCTimeRatio\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 线程数量")]),a._v("\nConcGCThreads\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动G1的堆空间占用比例")]),a._v("\nInitiatingHeapOccupancyPercent\n")])])]),t("h2",{attrs:{id:"jvm调优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优"}},[a._v("#")]),a._v(" JVM调优")]),a._v(" "),t("h3",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[a._v("#")]),a._v(" 基本概念")]),a._v(" "),t("p",[a._v("吞吐量：用户代码时间 / ( 用户代码执行时间 + 垃圾回收时间 )")]),a._v(" "),t("p",[a._v("响应时间：STW（Stop The World）越短，响应时间越好")]),a._v(" "),t("h3",{attrs:{id:"jvm调优指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优指令"}},[a._v("#")]),a._v(" JVM调优指令")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看所有指令")]),a._v("\njava -X\njava -XX:+PrintFlagsFinal -version\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 模糊查询指令")]),a._v("\njava -XX:+PrintFlagsFinal -version "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" Command \n")])])]),t("p",[a._v("常用指令")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("-Xms"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("size"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        \t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置初始 Java 堆大小")]),a._v("\n-Xmx"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("size"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        \t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置最大 Java 堆大小")]),a._v("\n-Xss"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("size"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        \t\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置 Java 线程堆栈大小")]),a._v("\n-XX:+PrintCommandLineFlags -version\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看当前使用的垃圾回收器")]),a._v("\n-XX: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MetaspaceSize")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128m\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改元空间大小")]),a._v("\n-XX: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MaxTenuringThreshold")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改老年代的大小")]),a._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("jinfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印虚拟机详细信息")]),a._v("\njstat -gc "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("time"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印gc信息，每<time>毫秒打印一次")]),a._v("\njconsole\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# java控制面板")]),a._v("\n")])])]),t("h3",{attrs:{id:"jvm调优场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优场景"}},[a._v("#")]),a._v(" JVM调优场景")]),a._v(" "),t("p",[t("strong",[a._v("系统CPU经常100%，如何调优")])]),a._v(" "),t("p",[a._v("CPU 100% 一定有线程在占用系统资源")]),a._v(" "),t("ol",[t("li",[a._v("找出哪个进程的 CPU 高（top）")]),a._v(" "),t("li",[a._v("该进程的哪个线程 CPU 高（top - Hp [pid]）")]),a._v(" "),t("li",[a._v("导出该线程的堆栈（jstack）")]),a._v(" "),t("li",[a._v("查找哪个方法（栈帧）消耗时间 （jstack）")]),a._v(" "),t("li",[a._v("工作线程占比高 | 垃圾回收线程占比高")])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看Linux中哪个进程占资源")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 只列出java的进程")]),a._v("\njps\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看这个<pid>的进程中哪个线程占资源")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v(" -Hp "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看这个<pid>的线程堆栈")]),a._v("\njstack "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 导出堆内存")]),a._v("\njmap -heap "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),t("p",[t("strong",[a._v("如何监控JVM")])]),a._v(" "),t("p",[a._v("jstat")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 格式模板")]),a._v("\njstat -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("option"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-h"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("lines"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("vmid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("interval"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("count"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 常见用法")]),a._v("\njstack "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 类加载统计")]),a._v("\njstat -class "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("19570")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 编译统计")]),a._v("\njstat -compiler "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("19570")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("### 观察信息")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 死锁")]),a._v("\nFound one java-level deadlock\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 锁时间过长")]),a._v("\n很多线程都在 waiting on "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("0x00000000eda673f"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("0")]),a._v(">")]),a._v(" 等待锁的释放\n要找到 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("0x00000000eda673f"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("0")]),a._v(">")]),a._v(" 这把锁被哪个线程持有\n举例说明：一个程序有10个线程，第一个线程持有锁后死循环，其它线程全部WAITING，只有第一个线程是RUNNABLE\n")])])]),t("p",[a._v("jconsole jvisualvm")]),a._v(" "),t("p",[t("strong",[a._v("执行GC之后内存占用依然很高")])]),a._v(" "),t("p",[a._v("使用jvisualvm打开GUI面板，监视 -> 堆 Dump，截取一个内存快照。")]),a._v(" "),t("p",[a._v("检查 -> 查找前20个最大的对象，可以检查到哪几个对象占用了大量的内存。")]),a._v(" "),t("p",[t("strong",[a._v("JMX不建议在生产环境使用")])]),a._v(" "),t("p",[a._v("JMX一般是在测试环境使用，因为 JMX 会 patch 到 JVM 上而且占用了很大的性能。")]),a._v(" "),t("p",[a._v("如何在线上系统观察 可以使用 jmap 命令找到占用内存较大的类")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("jmap -histo "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("21853")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("head")]),a._v(" -20\n")])])]),t("p",[a._v("但是对于内存特别大的系统，jmap执行期间会对进程产生很大影响，甚至卡顿")]),a._v(" "),t("p",[a._v("解决方案1：设定以下参数，OOM的时候会自动生成堆转储文件")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("-XX:+HeapDumpOnOutOfMemoryError\n")])])]),t("p",[a._v("解决方案2：有服务器备份（高可用），停掉这台服务器对其它服务器不影响")]),a._v(" "),t("h3",{attrs:{id:"jconsole-远程连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jconsole-远程连接"}},[a._v("#")]),a._v(" jconsole 远程连接")]),a._v(" "),t("p",[a._v("程序启动加入参数：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("java -Djava.rmi.server.hostname"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".17.11\n-Dcom.sun.management.jmxremote"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("11111")]),a._v("\n-Dcom.sun.management.jmxremote.authenticate"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("false\n-Dcom.sun.management.jmxremote.ssl"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("false\n")])])]),t("p",[a._v("windows 打开 jconsole 远程连接 192.168.17.11:11111")]),a._v(" "),t("h3",{attrs:{id:"gc-日志分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc-日志分析"}},[a._v("#")]),a._v(" GC 日志分析")]),a._v(" "),t("p",[a._v("执行命令")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("java -Xms20M -Xmx20M -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC GCDemo\n")])])]),t("p",[a._v("日志说明")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Allocation Failure"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ParNew: 4544K-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("260K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("6144K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0012072")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 4544K-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("261K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("19840K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0012674")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Times: "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("user")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("sys")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(", "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("real")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" \n\nParNew：年轻代收集器\n4544k-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("260k: 收集前后对比\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("6144k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(": 整个年轻代容量\n4544K-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("261K: 整个堆的情况\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("19840K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("：整个堆的大小\n")])])]),t("h3",{attrs:{id:"g1-日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1-日志"}},[a._v("#")]),a._v(" G1 日志")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC pause "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("G1 Evacuation pause"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("young"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("initial-mark"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0015790")]),a._v(" secs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\nG1 Evacuation pause: 年轻代复制存活对象\ninitial-mark: 混合回收阶段，这里是YGC混合老年代回收\n")])])]),t("h2",{attrs:{id:"附录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[a._v("#")]),a._v(" 附录")]),a._v(" "),t("p",[a._v("JVM一个线程的成本：1MB")]),a._v(" "),t("p",[a._v("线程多了调度成本就高了，造成了CPU的浪费")]),a._v(" "),t("p",[a._v("class被load到内存之后，class的二进制文件加载到内存里，与此同时生成了class类的对象，该对象指向了二进制文件。class对象存在metaspace")]),a._v(" "),t("p",[a._v("阿里多租户JVM：每租户单空间，Session based GC")])])}),[],!1,null,null,null);s.default=n.exports}}]);