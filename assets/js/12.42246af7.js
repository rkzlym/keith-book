(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{363:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-集合"}},[t._v("#")]),t._v(" Java 集合")]),t._v(" "),s("h2",{attrs:{id:"collection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),s("h3",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("blockquote",[s("p",[t._v("ArrayList、LinkedList、Vector、Stack、CopyOnWriteArrayList")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("特点")]),t._v(" "),s("th",[t._v("get(index)")]),t._v(" "),s("th",[t._v("add(E)")]),t._v(" "),s("th",[t._v("add(index, E)")]),t._v(" "),s("th",[t._v("remove(E)")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ArrayList")]),t._v(" "),s("td",[t._v("高效，线程不安全")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(n)")]),t._v(" "),s("td",[t._v("O(n)")])]),t._v(" "),s("tr",[s("td",[t._v("LinkedList")]),t._v(" "),s("td",[t._v("删除更高效，查询低效")]),t._v(" "),s("td",[t._v("O(n)")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(n)")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("Vector")]),t._v(" "),s("td",[t._v("低效，线程安全")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(n)")]),t._v(" "),s("td",[t._v("O(n)")])])])]),t._v(" "),s("h4",{attrs:{id:"arraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),s("ol",[s("li",[t._v("底层是"),s("font",{attrs:{color:"red"}},[t._v("数组")])],1),t._v(" "),s("li",[t._v("默认装"),s("font",{attrs:{color:"red"}},[t._v("Object")])],1),t._v(" "),s("li",[t._v("初始为"),s("font",{attrs:{color:"red"}},[t._v("10")]),t._v("，(Jdk8之后默认添加数据的时候才开始给默认长度)。")],1),t._v(" "),s("li",[t._v("每次扩容是"),s("font",{attrs:{color:"red"}},[t._v("原长度的一半（取整）")]),t._v("：第一次扩到15，第二次22")],1),t._v(" "),s("li",[t._v("扩容方式：Arrays.copyOf，默认把原数组复制到新数组")]),t._v(" "),s("li",[t._v("不是线程安全的")])]),t._v(" "),s("h4",{attrs:{id:"linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[t._v("#")]),t._v(" LinkedList")]),t._v(" "),s("ol",[s("li",[t._v("底层是双向链表")]),t._v(" "),s("li",[t._v("链表删除和增加快，查询和修改慢")]),t._v(" "),s("li",[t._v("实现了Queue接口，所以还提供了offer(), peek(), poll()等方法")])]),t._v(" "),s("h4",{attrs:{id:"copyonwritearraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearraylist"}},[t._v("#")]),t._v(" CopyOnWriteArrayList")]),t._v(" "),s("p",[t._v("写时加锁，读时不加锁，复制一个新的数组，把新数组指向原来的数组")]),t._v(" "),s("p",[t._v("适用于读多写少的场景")]),t._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("blockquote",[s("p",[t._v("LinkedHashSet、TreeSet、EnumSet、CopyOnWriteArraySet、ConcurrentSkipListSet")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("特点")]),t._v(" "),s("th",[t._v("add(E)")]),t._v(" "),s("th",[t._v("remove(E)")]),t._v(" "),s("th",[t._v("contains(E)")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HashSet")]),t._v(" "),s("td",[t._v("线程不安全，可存储null值")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("LinkedHashSet")]),t._v(" "),s("td",[t._v("查询时有序 (存储还是无序)")]),t._v(" "),s("td",[t._v("O(logn)")]),t._v(" "),s("td",[t._v("O(logn)")]),t._v(" "),s("td",[t._v("O(logn)")])]),t._v(" "),s("tr",[s("td",[t._v("TreeSet")]),t._v(" "),s("td",[t._v("可根据指定值排序(基于红黑树)")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("O(1)")])])])]),t._v(" "),s("h4",{attrs:{id:"hashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),s("ol",[s("li",[t._v("底层是HashMap")]),t._v(" "),s("li",[t._v("添加过程")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200209154216578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("h3",{attrs:{id:"queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),s("p",[t._v("在多线程的情况下，多考虑使用Queue")]),t._v(" "),s("h4",{attrs:{id:"deque-双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#deque-双端队列"}},[t._v("#")]),t._v(" Deque 双端队列")]),t._v(" "),s("blockquote",[s("p",[t._v("ArrayDeque、BlockingDeque、LinkedBlockingDeque")])]),t._v(" "),s("h4",{attrs:{id:"blokingqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blokingqueue"}},[t._v("#")]),t._v(" BlokingQueue")]),t._v(" "),s("blockquote",[s("p",[t._v("ArrayBlockingQueue、ProrityBlockingQueue、LinkedBlockingQueue")])]),t._v(" "),s("p",[t._v("获取数据时队列中无数据，阻塞。添加数据时队列已满，阻塞。")]),t._v(" "),s("p",[s("strong",[t._v("添加元素")])]),t._v(" "),s("p",[t._v("add：添加元素的时候，若超出了度列的长度会直接抛出异常")]),t._v(" "),s("p",[t._v("offer：添加元素的时候，若超出了度列的长度会直接返回false")]),t._v(" "),s("p",[t._v("put：添加元素的时候，若超出了度列的长度会阻塞一直等待空间，以加入元素")]),t._v(" "),s("p",[s("strong",[t._v("获取元素")])]),t._v(" "),s("p",[t._v("remove：获取元素，若队列为空，会抛出异常")]),t._v(" "),s("p",[t._v("poll：获取元素，队列为空时，返回null")]),t._v(" "),s("p",[t._v("take：获取元素，队列为空时，队列阻塞")]),t._v(" "),s("p",[t._v("element：查看队首元素，队列元素为空抛异常")]),t._v(" "),s("p",[t._v("peek：查看队首元素，队列元素为空返回 null")]),t._v(" "),s("h5",{attrs:{id:"synchronousqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronousqueue"}},[t._v("#")]),t._v(" SynchronousQueue")]),t._v(" "),s("p",[t._v("容量为0的队列，使用put添加元素时阻塞，直到另一个线程取到数据")]),t._v(" "),s("p",[t._v("场景：两个线程交换数据")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" blockingQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronousQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" blockingQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"子线程取到主线程数据:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    blockingQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h5",{attrs:{id:"transferqueue-linkedtransferqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transferqueue-linkedtransferqueue"}},[t._v("#")]),t._v(" TransferQueue LinkedTransferQueue")]),t._v(" "),s("p",[t._v("与 SynchronousQueue 的区别在于，使用 "),s("code",[t._v("transfer")]),t._v(" 方法来添加数据，并且当这个数据不被取走，线程会一直守在原地，类似MQ的消息确认机制。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" transferQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transfer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"concurrentlinkedqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrentlinkedqueue"}},[t._v("#")]),t._v(" ConcurrentLinkedQueue")]),t._v(" "),s("blockquote",[s("p",[t._v("底层使用CAS实现原子性操作")])]),t._v(" "),s("p",[t._v("使用 ConcurrentLinkedQueue 实现卖票程序")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" tickets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentLinkedQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        tickets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"票 编号:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tickets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"销售了 - "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"priorityqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[t._v("#")]),t._v(" PriorityQueue")]),t._v(" "),s("p",[t._v("有序的队列，内部使用二叉树实现")]),t._v(" "),s("h4",{attrs:{id:"delayqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delayqueue"}},[t._v("#")]),t._v(" DelayQueue")]),t._v(" "),s("p",[t._v("按照内部到期的时间进行排序，等待时间短的会排到队列的前面。")]),t._v(" "),s("p",[t._v("使用场景：按时间进行任务调度")]),t._v(" "),s("h2",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("特点")]),t._v(" "),s("th",[t._v("get(key)")]),t._v(" "),s("th",[t._v("put(key)")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HashMap")]),t._v(" "),s("td",[t._v("线程不安全，高效")]),t._v(" "),s("td",[t._v("O(1)~O(log n)")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("LinkedHashMap")]),t._v(" "),s("td",[t._v("查询时有序 (存储还是无序)")]),t._v(" "),s("td",[t._v("O(1)~O(log n)")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("TreeMap")]),t._v(" "),s("td",[t._v("可根据指定值排序(取决于Compare返回值)")]),t._v(" "),s("td",[t._v("O(log n)")]),t._v(" "),s("td",[t._v("O(1)")])]),t._v(" "),s("tr",[s("td",[t._v("Hashtable")]),t._v(" "),s("td",[t._v("线程安全，低效")]),t._v(" "),s("td",[t._v("O(1)~O(log n)")]),t._v(" "),s("td",[t._v("O(1)")])])])]),t._v(" "),s("h3",{attrs:{id:"hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),s("p",[s("strong",[t._v("JDK7和8的异同")])]),t._v(" "),s("p",[t._v("JDK7：")]),t._v(" "),s("ol",[s("li",[t._v("数组 + 链表")]),t._v(" "),s("li",[t._v("插入链表头部")]),t._v(" "),s("li",[t._v("直接计算 key 的 HashCode 值")]),t._v(" "),s("li",[t._v("扩容时会颠倒链表顺序")]),t._v(" "),s("li",[t._v("只要大于阈值就直接扩容2倍")])]),t._v(" "),s("p",[t._v("JDK8：")]),t._v(" "),s("ol",[s("li",[t._v("数组 + 链表 + 红黑树")]),t._v(" "),s("li",[t._v("插入链表尾部")]),t._v(" "),s("li",[t._v("采用 Key 的 HashCode 异或上 Key 的 HashCode 进行无符号右移16位的结果 "),s("code",[t._v("(h = key.hashCode()) ^ (h >>> 16)")]),t._v("，避免了只靠低位数据来计算哈希时导致的冲突，计算结果由高低位结合决定，使元素分布更均匀")]),t._v(" "),s("li",[t._v("扩容时保持原链表顺序")]),t._v(" "),s("li",[t._v("当数组容量小于64时，直接扩容。大于64时，若链表长度大于8就转红黑树，否则就扩容。")])]),t._v(" "),s("p",[s("strong",[t._v("负载因子为什么是0.75")])]),t._v(" "),s("p",[t._v("负载因子过小会导致更快扩容，浪费空间。过大会导致哈希碰撞的几率变大。")]),t._v(" "),s("p",[s("strong",[t._v("HashMap扩容复制")])]),t._v(" "),s("p",[t._v("不是简单的将原数组中的每一个元素取出进行重新hash映射，而是做移位检测。所谓移位检测的含义具体是针对HashMap做映射时的&运算所提出的，通过上文对&元算的分析可知，映射的本质即看hash值的某一位是0还是1，当扩容以后，会相比于原数组多出一位做比较，由多出来的这一位是0还是1来决定是否进行移位，而具体的移位距离，也是可知的。")]),t._v(" "),s("p",[s("strong",[t._v("JDK8添加过程")])]),t._v(" "),s("ol",[s("li",[t._v("底层：数组 + 链表 + 红黑树")]),t._v(" "),s("li",[t._v("首次添加操作创建数组，长度16，存的是"),s("font",{attrs:{color:"red"}},[t._v("一维数组Entry[]")])],1),t._v(" "),s("li",[t._v("扩容：超过临界值(Capacity * Load Factory)，则扩容为原来2倍，并将元数据复制过来\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200209154206861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])]),t._v(" "),s("h3",{attrs:{id:"linkedhashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[t._v("#")]),t._v(" LinkedHashMap")]),t._v(" "),s("p",[t._v("有序基于链表实现的 HashMap")]),t._v(" "),s("h3",{attrs:{id:"treemap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")]),t._v(" "),s("p",[t._v("基于红黑树实现的有序Map")]),t._v(" "),s("h3",{attrs:{id:"concurrenthashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),s("p",[t._v("1.7：Segment + HashEntry + Unsafe")]),t._v(" "),s("p",[t._v("1.8：移除Segment，使锁的粒度更小，Synchronized + CAS")]),t._v(" "),s("h3",{attrs:{id:"concurrentskitlistmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrentskitlistmap"}},[t._v("#")]),t._v(" ConcurrentSkitListMap")]),t._v(" "),s("blockquote",[s("p",[t._v("同步容器，有序")])]),t._v(" "),s("p",[s("strong",[t._v("跳表")])]),t._v(" "),s("p",[t._v("算法在最稀疏的层次进行搜索，直至需要查找的元素在该层两个相邻的元素中间。这时，算法将跳转到下一个层次，重复刚才的搜索，直到找到需要查找的元素为止。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210115222639601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),s("h3",{attrs:{id:"weakhashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weakhashmap"}},[t._v("#")]),t._v(" WeakHashMap")]),t._v(" "),s("p",[t._v("Entry 是弱引用，如果没有被其他强引用，那么GC后就会被回收")])])}),[],!1,null,null,null);a.default=e.exports}}]);