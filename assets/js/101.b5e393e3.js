(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{454:function(t,v,_){"use strict";_.r(v);var r=_(42),e=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"dubbo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[t._v("#")]),t._v(" Dubbo")]),t._v(" "),_("h2",{attrs:{id:"dubbo各层说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo各层说明"}},[t._v("#")]),t._v(" Dubbo各层说明")]),t._v(" "),_("p",[t._v("第一层：service层，接口层，给服务提供者和消费者来实现的")]),t._v(" "),_("p",[t._v("第二层：config层，配置层，主要是对dubbo进行各种配置的")]),t._v(" "),_("p",[t._v("第三层：proxy层，服务代理层，透明生成客户端的stub和服务单的skeleton")]),t._v(" "),_("p",[t._v("第四层：registry层，服务注册层，负责服务的注册与发现")]),t._v(" "),_("p",[t._v("第五层：cluster层，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务")]),t._v(" "),_("p",[t._v("第六层：monitor层，监控层，对rpc接口的调用次数和调用时间进行监控")]),t._v(" "),_("p",[t._v("第七层：protocol层，远程调用层，封装rpc调用")]),t._v(" "),_("p",[t._v("第八层：exchange层，信息交换层，封装请求响应模式，同步转异步")]),t._v(" "),_("p",[t._v("第九层：transport层，网络传输层，抽象mina和netty为统一接口")]),t._v(" "),_("p",[t._v("第十层：serialize层，数据序列化层")]),t._v(" "),_("h2",{attrs:{id:"dubbo-执行流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-执行流程"}},[t._v("#")]),t._v(" Dubbo 执行流程")]),t._v(" "),_("p",[t._v("服务的提供方会向注册中心注册自己提供的服务，当消费者在启动时，就会向注册中心订阅自己所需要的服务，如果服务提供方有数据变更等，注册中心将基于长连接的形式推送变更数据给消费者。")]),t._v(" "),_("h2",{attrs:{id:"dubbo-同步调用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-同步调用"}},[t._v("#")]),t._v(" Dubbo 同步调用")]),t._v(" "),_("p",[_("strong",[t._v("同步调用流程")])]),t._v(" "),_("ol",[_("li",[t._v("Consumer 业务线程调用远程接口，向 Provider 发送请求，同时当前线程处于"),_("code",[t._v("阻塞")]),t._v("状态；")]),t._v(" "),_("li",[t._v("Provider 接到 Consumer 的请求后，开始处理请求，将结果返回给 Consumer；")]),t._v(" "),_("li",[t._v("Consumer 收到结果后，当前线程继续往后执行。")])]),t._v(" "),_("p",[_("strong",[t._v("Dubbo底层是如何阻塞的")])]),t._v(" "),_("blockquote",[_("p",[t._v("Dubbo 的底层 IO 操作都是异步的")])]),t._v(" "),_("p",[t._v("Consumer 端发起调用后，得到一个 Future 对象。对于同步调用，业务线程通过"),_("code",[t._v("Future.get(timeout)")]),t._v("，阻塞等待 Provider 端将结果返回。"),_("code",[t._v("timeout")]),t._v("则是 Consumer 端定义的超时时间。当结果返回后，会设置到此 Future，并唤醒阻塞的业务线程；当超时时间到结果还未返回时，业务线程将会异常返回。")]),t._v(" "),_("h2",{attrs:{id:"dubbo-负载均衡的实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-负载均衡的实现"}},[t._v("#")]),t._v(" Dubbo 负载均衡的实现")]),t._v(" "),_("p",[t._v("FailoverCluster类的invoke调用，对invocation进行了拦截实现去实现负载均衡")]),t._v(" "),_("h2",{attrs:{id:"注册中心挂了可以继续通信吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注册中心挂了可以继续通信吗"}},[t._v("#")]),t._v(" 注册中心挂了可以继续通信吗")]),t._v(" "),_("p",[t._v("可以通信的，启动dubbo时，消费者会从zk拉取注册的生产者的地址接口等数据，缓存在本地。每次调用时，按照本地存储的地址进行调用。")]),t._v(" "),_("h2",{attrs:{id:"dubbo-心跳机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-心跳机制"}},[t._v("#")]),t._v(" Dubbo 心跳机制")]),t._v(" "),_("p",[t._v("目的：维持provider和consumer之间的长连接")]),t._v(" "),_("p",[t._v("实现：dubbo心跳时间heartbeat默认是1s，超过heartbeat时间没有收到消息，就发送心跳消 息(provider，consumer一样),如果连着3次(heartbeatTimeout为heartbeat*3)没有收到心跳响应，provider会关闭channel，而consumer会进行重连;不论是provider还是consumer的心跳检测都是通过启动定时任务的方式实现；")]),t._v(" "),_("p",[t._v("Dubbo的zookeeper做注册中心，如果注册中心全部挂掉，发布者和订阅者还能通信吗？")]),t._v(" "),_("p",[t._v("注册中心对等集群，任意一台宕机后，将会切换到另一台；注册中心全部宕机后，服务的提供者和消费者仍能通过本地缓存通讯。服务提供者无状态，任一台 宕机后，不影响使用；服务提供者全部宕机，服务消费者会无法使用，并无限次重连等待服务者恢复；\n挂掉是不要紧的，但前提是你没有增加新的服务，如果你要调用新的服务，则是不能办到的。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210128173522387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),_("h2",{attrs:{id:"rpc协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rpc协议"}},[t._v("#")]),t._v(" RPC协议")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210106221257207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("协议名称")]),t._v(" "),_("th",[t._v("实现描述")]),t._v(" "),_("th",[t._v("连接")]),t._v(" "),_("th",[t._v("使用场景")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("dubbo")]),t._v(" "),_("td",[t._v("netty")]),t._v(" "),_("td",[t._v("单一长连接和NIO异步传输")]),t._v(" "),_("td",[t._v("小数据量大并发的服务调用，消费者比提供者多，不适合传送大数据量的服务，比如文件、传视频")])]),t._v(" "),_("tr",[_("td",[t._v("rmi")]),t._v(" "),_("td",[t._v("采用JRM 作为通讯协议")]),t._v(" "),_("td",[t._v("多连接，短连接，TCP/IP，BIO")]),t._v(" "),_("td",[t._v("可传文件，不支持防火墙穿透")])]),t._v(" "),_("tr",[_("td",[t._v("hessian")]),t._v(" "),_("td",[t._v("hessian二进制序列化")]),t._v(" "),_("td",[t._v("多连接，短连接，传输协议：HTTP，同步传输")]),t._v(" "),_("td",[t._v("提供者比消费者多 ，可传文件，跨语言传输")])]),t._v(" "),_("tr",[_("td",[t._v("http")]),t._v(" "),_("td",[t._v("表单序列化")]),t._v(" "),_("td",[t._v("多连接，短连接，HTTP，同步传输")]),t._v(" "),_("td",[t._v("提供者大于消费者，数据包混合")])]),t._v(" "),_("tr",[_("td",[t._v("webservice")]),t._v(" "),_("td",[t._v("SOAP文件序列化")]),t._v(" "),_("td",[t._v("多连接，短连接，HTTP，同步传输")]),t._v(" "),_("td",[t._v("系统集成，跨语言调用")])]),t._v(" "),_("tr",[_("td",[t._v("thrift")]),t._v(" "),_("td",[t._v("与thrift RPC实现集成，并在基础上修改了报文头")]),t._v(" "),_("td",[t._v("长连接、NIO异步传输")]),t._v(" "),_("td")])])])])}),[],!1,null,null,null);v.default=e.exports}}]);