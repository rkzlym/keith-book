(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{404:function(t,s,a){"use strict";a.r(s);var e=a(42),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务"}},[t._v("#")]),t._v(" mysql 事务")]),t._v(" "),a("h2",{attrs:{id:"acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),a("p",[t._v("原子性（atomicity）：一个事务要么全部提交成功，要么全部失败回滚")]),t._v(" "),a("p",[t._v("一致性（consistency）：一个事务在执行之前和执行之后，数据库都必须处于一致性状态")]),t._v(" "),a("p",[t._v("隔离性（isolation）：一个事务的执行不能不被其他事务干扰")]),t._v(" "),a("p",[t._v("持久性（durability）：一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中")]),t._v(" "),a("h2",{attrs:{id:"事务操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务操作"}},[t._v("#")]),t._v(" 事务操作")]),t._v(" "),a("h3",{attrs:{id:"开启-关闭自动提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启-关闭自动提交"}},[t._v("#")]),t._v(" 开启/关闭自动提交")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查看自动提交")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHOW")]),t._v(" VARIABLES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%autocommit%'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 关闭自动提交，只针对当前的会话有效")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" autocommit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"使用事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用事务"}},[t._v("#")]),t._v(" 使用事务")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 开启事务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 插入数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" tb_user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" tb_user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'李四'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 提交事务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 回滚事务")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"保存点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#保存点"}},[t._v("#")]),t._v(" 保存点")]),t._v(" "),a("p",[t._v("保存点就是可以回滚到指定的之前设置的保存点。当开启事务之后操作了很多"),a("code",[t._v("SQL")]),t._v("，可以设置个保存点。当再执行的"),a("code",[t._v("SQL")]),t._v("有问题不需要的时候就可以回滚到之前设置的保存点，不用把当前事务整个回滚掉。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置保存点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" 保存点名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 回滚到指定保存点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" 保存点名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除保存点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RELEASE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" 保存点名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"查看隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看隔离级别"}},[t._v("#")]),t._v(" 查看隔离级别")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 修改隔离级别")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" 事务隔离级别"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查看隔离级别")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@transaction_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"事务并发性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务并发性问题"}},[t._v("#")]),t._v(" 事务并发性问题")]),t._v(" "),a("p",[t._v("对于同时运行多个事务，这些事务访问"),a("strong",[t._v("数据库中相同的数据")]),t._v("时，没有没有采取必要的隔离机制，就会导致各种并发问题：")]),t._v(" "),a("ul",[a("li",[t._v("脏读：事务A读到了事务B已修改但尚未提交的数据，此时事务B回滚，A读取数据无效，不符合一致性。")]),t._v(" "),a("li",[t._v("不可重复读：事务A读到了事务B已提交的修改数据，不符合隔离性。")]),t._v(" "),a("li",[t._v("幻读：事务A读到了事务B提交的新增数据，不符合隔离性。")])]),t._v(" "),a("h2",{attrs:{id:"mysql提供的4种隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql提供的4种隔离级别"}},[t._v("#")]),t._v(" Mysql提供的4种隔离级别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("隔离级别")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("读未提交 READ UNCOMMITTED")]),t._v(" "),a("td",[t._v("存在脏读，不可重复读，幻读问题")])]),t._v(" "),a("tr",[a("td",[t._v("读已提交 READ COMMITTED")]),t._v(" "),a("td",[t._v("可避免脏读，存在不可重复度，幻读问题")])]),t._v(" "),a("tr",[a("td",[t._v("可重复读 REPEATABLE READ（默认）")]),t._v(" "),a("td",[t._v("可避免脏读，不可重复读，存在幻读问题")])]),t._v(" "),a("tr",[a("td",[t._v("可序列化 SERIALIZABLE")]),t._v(" "),a("td",[t._v("所有问题可避免，但性能低下")])])])]),t._v(" "),a("h2",{attrs:{id:"mvcc-多版本并发控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-多版本并发控制"}},[t._v("#")]),t._v(" MVCC 多版本并发控制")]),t._v(" "),a("p",[t._v("MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当前读\n像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。")])]),t._v(" "),a("li",[a("p",[t._v("快照读\n像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本")])])]),t._v(" "),a("h3",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("h4",{attrs:{id:"undo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-log"}},[t._v("#")]),t._v(" Undo Log")]),t._v(" "),a("p",[t._v("每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段")]),t._v(" "),a("ul",[a("li",[t._v("DB_ROW_ID：隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引")]),t._v(" "),a("li",[t._v("DB_TRX_ID：最近 修改/插入 事务ID，记录创建这条记录/最后一次修改该记录的事务ID")]),t._v(" "),a("li",[t._v("DB_ROLL_PTR：回滚指针，指向这条记录的上一个版本（存储于rollback segment里）")])]),t._v(" "),a("p",[t._v("每次事务提交都会有将其加入 undo log 中，undo log会成为一条记录版本线性表")]),t._v(" "),a("ul",[a("li",[t._v("在事务2修改该行数据时，数据库也先为该行加锁")]),t._v(" "),a("li",[t._v("然后把该行数据拷贝到undo log中，作为旧记录，发现该行记录已经有undo log了，那么最新的旧数据作为链表的表头，插在该行记录的undo log最前面")]),t._v(" "),a("li",[t._v("修改该行age为30岁，并且修改隐藏字段的事务ID为当前事务2的ID, 那就是2，回滚指针指向刚刚拷贝到undo log的副本记录")]),t._v(" "),a("li",[t._v("事务提交，释放锁")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210125144344982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),a("h4",{attrs:{id:"read-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-view"}},[t._v("#")]),t._v(" Read View")]),t._v(" "),a("p",[t._v("Read View 就是事务进行快照读操作的时候生产的读视图，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID (当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大)")]),t._v(" "),a("p",[t._v("Read View 遵循一个可见性算法，主要是将要被修改的数据的最新记录中的DB_TRX_ID（当前事务ID）取出来，与系统当前其他活跃事务的ID去对比，如果 DB_TRX_ID 跟 Read View 的属性做了某些比较，不符合可见性，那就通过 DB_ROLL_PTR 回滚指针去取出 Undo Log 中的 DB_TRX_ID 再比较，即遍历链表的DB_TRX_ID（从链首到链尾，即从最近的一次修改查起），直到找到满足特定条件的DB_TRX_ID, 那么这个DB_TRX_ID所在的旧记录就是当前事务能看见的最新老版本")])])}),[],!1,null,null,null);s.default=r.exports}}]);