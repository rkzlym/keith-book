(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{368:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),s("h2",{attrs:{id:"_1-有哪几种线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-有哪几种线程池"}},[t._v("#")]),t._v(" 1. 有哪几种线程池")]),t._v(" "),s("ul",[s("li",[t._v("newFixedThreadPool（固定大小的线程池）")]),t._v(" "),s("li",[t._v("newSingleThreadExecutor（单线程线程池）")]),t._v(" "),s("li",[t._v("newCachedThreadPool（可缓存线程的线程池）用于并发执行大量短期的小任务。")]),t._v(" "),s("li",[t._v("newScheduledThreadPool：用于需要多个后台线程执行周期任务，同时需要限制线程数量的场景。")])]),t._v(" "),s("h2",{attrs:{id:"_2-线程池的七大参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程池的七大参数"}},[t._v("#")]),t._v(" 2. 线程池的七大参数")]),t._v(" "),s("ol",[s("li",[t._v("corePoolSize: 线程池中的常驻核心线程数。")]),t._v(" "),s("li",[t._v("maximumPoolSize: 线程池能够容纳同时执行的最大线程数，此值必须大于等于1。")]),t._v(" "),s("li",[t._v("keepAliveTime: 多余的空闲线程存活时间。")]),t._v(" "),s("li",[t._v("unit: keepAliveTime的单位。")]),t._v(" "),s("li",[t._v("workQueue: 任务队列，被提交但尚未被执行的任务，一般使用阻塞队列。")]),t._v(" "),s("li",[t._v("threadFactory: 表示生成线程池中工作线程的线程工厂，用于创建线程，一般默认即可。")]),t._v(" "),s("li",[t._v("handler: 拒绝策略，表示当队列满了并且工作线程大于等于线程的最大线程数时如何来拒绝请求执行的runnable策略。")])]),t._v(" "),s("h2",{attrs:{id:"_3-线程池底层工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程池底层工作原理"}},[t._v("#")]),t._v(" 3. 线程池底层工作原理")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在创建了线程池后，等待提交过来的任务请求")])]),t._v(" "),s("li",[s("p",[t._v("当调用execute()方法添加一个请求任务时，线程池会做如下判断")]),t._v(" "),s("ul",[s("li",[t._v("如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行任务")]),t._v(" "),s("li",[t._v("如果正在运行的线程大于等于corePoolSize，那么将这个任务"),s("font",{attrs:{color:"red"}},[t._v("放入队列")])],1),t._v(" "),s("li",[t._v("如果这时队列满了且正在运行的线程数量小于maximumPoolSize，那么要创建非核心线程立刻运行这个任务")]),t._v(" "),s("li",[t._v("如果队列满了且正在运行的线程数大于等于maximumPoolSize，那么线程会启动饱和"),s("font",{attrs:{color:"red"}},[t._v("拒绝策略")]),t._v("来执行")],1)])]),t._v(" "),s("li",[s("p",[t._v("当一个线程完成任务时，他会从队列中取下一个任务来执行")])]),t._v(" "),s("li",[s("p",[t._v("当一个线程无事可做超过keepAliveTime时，线程会判断：")]),t._v(" "),s("ul",[s("li",[t._v("如果当线程数大于corePoolSize，那么这个线程就被停掉")]),t._v(" "),s("li",[t._v("线程池的所有任务完成后"),s("font",{attrs:{color:"red"}},[t._v("最终会收缩到corePoreSize大小")])],1)])])]),t._v(" "),s("h2",{attrs:{id:"_4-拒绝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-拒绝策略"}},[t._v("#")]),t._v(" 4. 拒绝策略")]),t._v(" "),s("p",[t._v("定义：等待队列和max线程数都满了，那么就需要启用拒绝策略处理这个问题。")]),t._v(" "),s("ul",[s("li",[t._v("AbortPolicy(默认)：直接抛出RejectedExecutionException异常")]),t._v(" "),s("li",[t._v("CallerRunsPolicy：既不会抛弃任务，也不会抛出异常，而是把某些任务回退给调用者")]),t._v(" "),s("li",[t._v("DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务")]),t._v(" "),s("li",[t._v("DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常")])]),t._v(" "),s("h2",{attrs:{id:"_5-手写一个线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-手写一个线程池"}},[t._v("#")]),t._v(" 5. 手写一个线程池")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" pool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultThreadFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CallerRunsPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" fi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_6-如何合理配置线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何合理配置线程池"}},[t._v("#")]),t._v(" 6. 如何合理配置线程池")]),t._v(" "),s("ul",[s("li",[t._v("Cpu密集型(Cpu一直运行)：Cpu核数+1个线程的线程池")]),t._v(" "),s("li",[t._v("IO密集型(需要不断取数据)：\n"),s("ul",[s("li",[t._v("IO密集型并不是一直在执行任务，配置尽可能多的线程，如Cpu核数 * 2")]),t._v(" "),s("li",[t._v("Cpu核数 / 1 - 阻塞系数(0.8~0.9)\t例如8核Cpu：8 / (1 - 0.9) = 80个线程数")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);